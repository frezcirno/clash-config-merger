#!/usr/bin/env python3
import copy
import os
import re
import string
import time
import traceback
from enum import Enum
from hashlib import sha1
from random import choices
from typing import Dict, List, Optional

import requests
import yaml
from pydantic import Field
from pydantic.dataclasses import dataclass

DEFAULT_HTTP_PORT = 7890
DEFAULT_SOCKS_PORT = 7891
DEFAULT_REDIR_PORT = 7892
DEFAULT_TPROXY_PORT = 7893
DEFAULT_MIXED_PORT = 7890
DEFAULT_CONTROLLER_PORT = 9090

with open("./template.yaml") as f:
    TEMPLATE = yaml.safe_load(f)

PRESET_CHAINS = ["PROXY"] + list({rule.split(",")[2] for rule in TEMPLATE["rules"] if rule.count(",") > 1} - {"DIRECT", "REJECT", "PROXY"})

USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"


class Mode(str, Enum):
    PROXY = "proxy"
    TUN = "tun"
    REDIR = "redir"


@dataclass
class Config:
    mode: Mode = Mode.PROXY
    trusted: bool = True

    port: int = DEFAULT_HTTP_PORT
    http_port: Optional[int] = None  # alias for port
    socks_port: Optional[int] = None
    redir_port: int = DEFAULT_REDIR_PORT
    tproxy_port: int = DEFAULT_TPROXY_PORT
    mixed_port: Optional[int] = None

    controller_port: int = DEFAULT_CONTROLLER_PORT
    secret: Optional[str] = None

    fake_ip: bool = True

    dns: bool = False
    eth: Optional[str] = None

    keep_upstream_chains: bool = False
    custom_groups: List[str] = Field(default_factory=list)

    upstreams: Dict[str, str] = Field(default_factory=dict)
    custom_chains: List[str] = Field(default_factory=list)

    def __post_init__(self):
        if isinstance(self.custom_groups, str):
            self.custom_groups = self.custom_groups.split(",") if self.custom_groups else []

    def __post_init_post_parse__(self):
        if self.http_port is not None:
            self.port = self.http_port

        self.upstreams = {k.strip(): v.strip() for k, v in self.upstreams.items()}


def retrieve(url: str, ttl=3600) -> Dict:
    print(f"Retrieving {url}", flush=True)

    save_path = "./cache/" + sha1(url.encode()).hexdigest() + ".yaml"

    if os.path.exists(save_path):
        now = time.time()
        ctime = os.path.getmtime(save_path)
        if ctime > now:
            # clock changed
            print("Clock changed, ignoring cache", flush=True)
        elif now - ctime < ttl:
            with open(save_path, "rb") as f:
                return f.read()

    resp = requests.get(url, headers={"User-Agent": USER_AGENT})
    if not resp.ok:
        raise Exception("Failed to retrieve upstream")

    os.makedirs("./cache", exist_ok=True)
    with open(save_path, "wb") as f:
        f.write(resp.content)

    return resp.content


def retrieve_upstream(upstream: str, ttl=3600) -> Dict:
    content = retrieve(upstream, ttl)
    obj = yaml.safe_load(content)
    return obj["proxies"], obj["proxy-groups"]


regexp = re.compile(r"(\b(HK|hongkong|TW|taiwan)\b|🇨🇳|🇭🇰|香港|台湾)", re.I)


def generate(config: Config) -> Dict:
    instance = copy.deepcopy(TEMPLATE)

    if config.mode != Mode.PROXY and not config.eth:
        raise Exception("Need eth")

    if not config.upstreams:
        raise Exception("Need upstreams")

    if config.mode != Mode.PROXY:
        config.dns = True
        config.trusted = True

    if config.mode == Mode.PROXY:
        if config.mixed_port is not None:
            instance["mixed-port"] = config.mixed_port or DEFAULT_MIXED_PORT
        else:
            instance["port"] = config.port
        if config.socks_port is not None:
            instance["socks-port"] = config.socks_port or DEFAULT_SOCKS_PORT
    elif config.mode == Mode.REDIR:
        instance["redir-port"] = config.redir_port
        instance["tproxy-port"] = config.tproxy_port

    if config.trusted:
        instance["allow-lan"] = True
        instance["bind-address"] = "*"
        instance["external-controller"] = f"127.0.0.1:{config.controller_port}"
        instance["secret"] = ""
    else:
        instance["allow-lan"] = False
        instance["bind-address"] = "127.0.0.1"
        instance["external-controller"] = f"127.0.0.1:{config.controller_port}"
        instance["secret"] = config.secret if config.secret is not None else ''.join(choices(string.ascii_letters + string.digits, k=32))

    if config.dns:
        instance["dns"]["enable"] = True
        instance["dns"]["listen"] = "0.0.0.0:53" if config.mode == Mode.REDIR else "127.0.0.53:53"
        instance["dns"]["enhanced-mode"] = "fake-ip" if config.fake_ip else "redir-host"
        if config.mode != Mode.PROXY:
            instance["dns"]["nameserver"].append(f"dhcp://{config.eth}")
    else:
        del instance["dns"]

    if config.mode == Mode.TUN:
        instance["tun"]["enable"] = True
    else:
        del instance["tun"]

    upstream_proxies_chains = {}

    proxy_names = set()
    for key, upstream in config.upstreams.items():
        try:
            proxies, chains = retrieve_upstream(upstream)

            # Remove indicator proxies
            proxies = [proxy for proxy in proxies if "有效期" not in proxy["name"]]
            for chain in chains:
                chain["proxies"] = [proxy for proxy in chain["proxies"]
                                    if "有效期" not in proxy and proxy not in ["DIRECT", "REJECT", "GLOBAL"]]
            chains = [chain for chain in chains if chain["proxies"]]

            # check name collision
            for proxy in proxies:
                if (proxy_name := proxy['name']) in proxy_names:
                    # find a new name for it
                    cnt = 1
                    while (new_name := proxy['name'] + '#' + str(cnt)) in proxy_names:
                        cnt += 1
                    # update name
                    proxy['name'] = new_name
                    for chain in chains:
                        chain["proxies"] = [new_name if cp == proxy_name else cp for cp in chain["proxies"]]

                proxy_names.add(proxy['name'])

            upstream_proxies_chains[key] = proxies, chains
        except Exception as e:
            print(f"Failed to retrieve {upstream}: {e}\n{traceback.format_exc()}", flush=True)

    instance["proxies"] = [proxy for proxies, chains in upstream_proxies_chains.values() for proxy in proxies]

    proxy_groups = []

    # all proxies
    all_proxies = {
        "name": "all",
        "type": "url-test",
        "proxies": [proxy["name"] for proxy in instance["proxies"]],
        "url": "http://www.gstatic.com/generate_204",
        "interval": 300,
        "tolerance": 100,
    }
    proxy_groups.append(all_proxies)

    if 'cn' in config.custom_groups:
        all_proxies_cn = {
            "name": "all-cn",
            "type": "url-test",
            "proxies": [proxy["name"] for proxy in instance["proxies"] if regexp.search(proxy["name"])],
            "url": "http://www.gstatic.com/generate_204",
            "interval": 300,
            "tolerance": 100,
        }
        if all_proxies_cn["proxies"]:
            proxy_groups.append(all_proxies_cn)

    if 'oversea' in config.custom_groups:
        all_proxies_oversea = {
            "name": "all-oversea",
            "type": "url-test",
            "proxies": [proxy["name"] for proxy in instance["proxies"] if regexp.search(proxy["name"]) is None],
            "url": "http://www.gstatic.com/generate_204",
            "interval": 300,
            "tolerance": 100,
        }
        if all_proxies_oversea["proxies"]:
            proxy_groups.append(all_proxies_oversea)

    # if 'udp' in config.custom_groups:
    #     all_proxies_udp = {
    #         "name": "all-udp",
    #         "type": "url-test",
    #         "proxies": [proxy["name"] for proxy in instance["proxies"] if proxy.get("udp", False)],
    #         "url": "http://www.gstatic.com/generate_204",
    #         "interval": 300,
    #         "tolerance": 100,
    #     }
    #     if all_proxies_udp["proxies"]:
    #         proxy_groups.append(all_proxies_udp)

    # if 'udp-oversea' in config.custom_groups:
    #     all_proxies_udp_oversea = {
    #         "name": "all-udp-oversea",
    #         "type": "url-test",
    #         "proxies": [proxy["name"] for proxy in instance["proxies"] if proxy.get("udp", False) and regexp.search(proxy["name"]) is None],
    #         "url": "http://www.gstatic.com/generate_204",
    #         "interval": 300,
    #         "tolerance": 100,
    #     }
    #     if all_proxies_udp_oversea["proxies"]:
    #         proxy_groups.append(all_proxies_udp_oversea)

    # upstream proxies invidually
    for key, (proxies, chains) in upstream_proxies_chains.items():
        upstream_all_proxies = {
            "name": key,
            "type": "url-test",
            "proxies": [proxy["name"] for proxy in proxies],
            "url": "http://www.gstatic.com/generate_204",
            "interval": 300,
            "tolerance": 100,
        }
        proxy_groups.append(upstream_all_proxies)

        if 'cn' in config.custom_groups:
            upstream_all_proxies_cn = {
                "name": key + "-cn",
                "type": "url-test",
                "proxies": [proxy["name"] for proxy in proxies if regexp.search(proxy["name"])],
                "url": "http://www.gstatic.com/generate_204",
                "interval": 300,
                "tolerance": 100,
            }
            if upstream_all_proxies_cn["proxies"]:
                proxy_groups.append(upstream_all_proxies_cn)

        if 'oversea' in config.custom_groups:
            upstream_all_proxies_oversea = {
                "name": key + "-oversea",
                "type": "url-test",
                "proxies": [proxy["name"] for proxy in proxies if regexp.search(proxy["name"]) is None],
                "url": "http://www.gstatic.com/generate_204",
                "interval": 300,
                "tolerance": 100,
            }
            if upstream_all_proxies_oversea["proxies"]:
                proxy_groups.append(upstream_all_proxies_oversea)

        # if 'udp' in config.custom_groups:
        #     upstream_all_proxies_udp = {
        #         "name": key + "-udp",
        #         "type": "url-test",
        #         "proxies": [proxy["name"] for proxy in proxies if proxy.get("udp", False)],
        #         "url": "http://www.gstatic.com/generate_204",
        #         "interval": 300,
        #         "tolerance": 100,
        #     }
        #     if upstream_all_proxies_udp["proxies"]:
        #         proxy_groups.append(upstream_all_proxies_udp)

        # if 'udp-oversea' in config.custom_groups:
        #     upstream_all_proxies_udp_oversea = {
        #         "name": key + "-udp-oversea",
        #         "type": "url-test",
        #         "proxies": [proxy["name"] for proxy in proxies if proxy.get("udp", False) and regexp.search(proxy["name"]) is None],
        #         "url": "http://www.gstatic.com/generate_204",
        #         "interval": 300,
        #         "tolerance": 100,
        #     }
        #     if upstream_all_proxies_udp_oversea["proxies"]:
        #         proxy_groups.append(upstream_all_proxies_udp_oversea)

        if config.keep_upstream_chains:
            for chain in chains:
                if chain["type"] != "url-test":
                    continue

                if set(chain["proxies"]) == set(upstream_all_proxies["proxies"]):
                    continue

                chain = chain.copy()

                chain["name"] = key + "-" + chain["name"]
                proxy_groups.append(chain)

    chain_groups = []

    for custom_chain in PRESET_CHAINS + config.custom_chains:
        chain = {
            "name": custom_chain,
            "type": "select",
            "proxies": (["PROXY"] if custom_chain != "PROXY" else []) + [pg["name"] for pg in proxy_groups]
        }
        if "direct" in config.custom_groups:
            chain["proxies"].append("DIRECT")
        chain_groups.append(chain)

    instance["proxy-groups"] = chain_groups + proxy_groups

    return instance


if __name__ == "__main__":
    import sys
    print("Python version:", sys.version)
    bind = sys.argv[1] if len(sys.argv) > 1 else "127.0.0.1"
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 5000

    from flask import Flask, Response, request, url_for
    app = Flask(__name__)

    @app.get("/clash/config.yaml")
    def generate_yaml():
        args = request.values.to_dict()
        if "upstreams" not in args:
            with open("upstreams.yaml") as f:
                args["upstreams"] = yaml.safe_load(f)
        print(args, flush=True)
        try:
            config = Config(**args)
            clash_config = generate(config)
            for rp, value in clash_config["rule-providers"].items():
                value["url"] = url_for("forward", key=rp, _external=True, _scheme="http")
            stream = yaml.safe_dump(clash_config, allow_unicode=True, sort_keys=False)
        except Exception as e:
            print(f"Generate config failed: {e}\n{traceback.format_exc()}", flush=True)
            return str(e), 500
        return Response(stream, mimetype="text/yaml")

    @app.get("/clash/forward")
    def forward():
        key = request.values.get("key")
        if key not in TEMPLATE["rule-providers"]:
            return "Not found", 404
        url = TEMPLATE["rule-providers"][key]["url"]
        return retrieve(url, 86400)

    from gevent.pywsgi import WSGIServer
    http_server = WSGIServer((bind, port), app)
    http_server.serve_forever()
